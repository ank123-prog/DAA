Program 21: Given a directed graph with two vertices (source and destination). Design an algorithm and implement it using a program to find the weight of the shortest path from source to destination with exactly k edges on the path.

Code: #include<bits/stdc++.h> using namespace std;

#define V 100
#define INF INT_MAX int arr[100][100];

int shortestpath(int arr[][V],int u,int v,int k, int n)
{
if(k==0 && u==v) return 0;
if(k==1 && arr[u][v] != INF) return arr[u][v]; if(k<=0)
return INF; int res = INF; for(int i=0;i<n;i++)
{
if(arr[u][i] != INF && u!=i && v!=i)
{
int rec_res = shortestpath(arr, i,v,k-1, n); if(rec_res != INF)
res = min(res, arr[u][i]+rec_res);
}
}
return res;
}

int main() {
int n;
cout<<"for values INF enter -1"<<endl; cin>>n;
int a;

for(int i=0;i<n;i++){
for(int j=0;j<n;j++){
cin>>a;
 
if(a<0){
arr[i][j] = INF;
 
}
else

}
}
 


arr[i][j] = a;
 
int u,v,k; cin>>u>>v>>k;

cout<<"weight of the shortest path is "<<shortestpath(arr,u-1,v- 1,k,n)<<endl;// 0 indexing is followed
return 0;
}

Output:
 
Program 22: Assume that a project of road construction to connect some cities is given to your friend. Map of these cities and roads which will connect them (after construction) is provided to him in the form of a graph. Certain amount of rupees is associated with construction of each road. Your friend has to calculate the minimum budget required for this project. The budget should be designed in such a way that the cost of connecting the cities should be minimum and number of roads required to connect all the cities should be minimum (if there are N cities then only N-1 roads need to be constructed). He asks you for help. Now, you have to help your friend by designing an algorithm which will find minimum cost required to connect these cities. (use Prim's algorithm).

Code:
#include<bits/stdc++.h> using namespace std;

int main() {
int nodes, edges; cin>>nodes; cin>>edges;

vector<pair<int,int>> graph[nodes]; int source, destination, weight;

for(int i=0;i<edges;i++) { cin>>source>>destination>>weight;
graph[source].push_back(make_pair(destination,weight)); graph[destination].push_back(make_pair(source, weight));
}

int key[nodes];//to select the min weight
int parent[nodes];// to store the parent node bool mst[nodes]; // to construct the path

for(int i=0;i< nodes;i++) { key[i]= INT_MAX; mst[i] = false; parent[i] = -1;
}

// priority queue APPROACH priority_queue<pair<int, int>, vector<pair<int,int>>,
 
greater<pair<int,int>>> pq;

key[0] = 0;//select a node to start from parent[0] = 0;
pq.push({0, 0}); //{weight, index of starting node} for(int i=0;i< nodes-1;i++)
{
int u = pq.top().second;//get the index of top node pq.pop();//remove the node from queue
mst[u] = true;//set mst as true for the node u

for(auto it: graph[i])
{
int dest = it.first; int wt = it.second;
if(mst[dest]== false && wt<key[dest])//check if the parent array needs to be changed
{
parent[dest] = u; pq.push({key[dest], dest}); key[dest] = wt;
}
}
}

int mstwt = 0;
// to print the list with minimun weight

for(int i=0;i<nodes;i++) mstwt += key[i];
cout<<"Min Spanning Weight is: "<<mstwt; return 0;
}
 
Output:
 
Program 23: Implement the previous problem using Kruskal's algorithm.

Code: #include<bits/stdc++.h> using namespace std;

vector<int> parent(100); vector<int> sz(100);

void make_set(int v) {
parent[v]=v; sz[v] = 1;
}

int find_set(int v) {
if(v==parent[v])
return v;
return parent[v] = find_set(parent[v]);
}

void union_set(int a, int b) { a = find_set(a);
b = find_set(b);
if(a != b){//dont belong to same set if(sz[a] < sz[b])
swap(a,b); parent[b] = a; sz[a] += sz[b];
}
}

int main() {
int n,e; cin>>n>>e;
for(int i=0;i<n;i++)
make_set(i); vector<vector<int>> graph; for(int i=0;i<e;i++) {
int u,v,w; cin>>u>>v>>w;
 
graph.push_back({w,u,v});
graph.push_back({w,v,u});
}
sort(graph.begin(), graph.end());//sort according to weight int total_weight = 0;
for(auto i: graph){
int w = i[0]; int u = i[1]; int v = i[2];
int x = find_set(u); int y = find_set(v); if(x == y){
continue;
}
else {
total_weight += w;
union_set(u,v);//add to set
}
}
cout<<"Minimum Spanning Weight is: "<<total_weight; return 0;
}

Output:
 
Program 24: Assume that the same road construction project is given to another person. The amount he will earn from this project is directly proportional to the budget of the project. This person is greedy, so he decided to maximize the budget by constructing those roads which have the highest construction cost. Design an algorithm and implement it using a program to find the maximum budget required for the project.

Code:
#include<bits/stdc++.h> using namespace std;

bool compare(const pair<int,int>& a, const pair<int, int>& b) { return b.first > a.first;
}

vector<int> parent(100); vector<int> sz(100);

void make_set(int v) {
parent[v]=v; sz[v] = 1;
}

int find_set(int v) {
if(v==parent[v])
return v;
return parent[v] = find_set(parent[v]);
}

void union_set(int a, int b) { a = find_set(a);
b = find_set(b);
if(a != b){//dont belong to same set if(sz[a] < sz[b])
swap(a,b); parent[b] = a; sz[a] += sz[b];
}
}

int main() {
 
int n,e; cin>>n>>e;
for(int i=0;i<n;i++)
make_set(i); vector<vector<int>> graph; for(int i=0;i<e;i++) {
int u,v,w; cin>>u>>v>>w;
graph.push_back({w,u,v});
graph.push_back({w,v,u});
}
sort(graph.rbegin(), graph.rend());//sort according to weight int total_weight = 0;
for(auto i: graph) {
int w = i[0]; int u = i[1]; int v = i[2];
int x = find_set(u); int y = find_set(v); if(x == y) {
continue;
}
else { total_weight += w;
union_set(u,v);//add to set
}
}
cout<<"Maximum Spanning Weight is: "<<total_weight; return 0;
}
 
Output:

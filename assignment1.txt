Program 1: Given an array of nonnegative integers, design a linear algorithm and implement it using a program to find whether given key element is present in the array or not. Also, find total number of comparisons for each input case.

Code: #include<iostream> using namespace std;

int main(){ int t; cin>>t; while(t--){
int n,key,count=0,i; cin>>n;
int arr[n]; for(i=0;i<n;i++)
cin>>arr[i]; cin>>key; for(i=0;i<n;i++) {
count++; if(key==arr[i])
break;
}
if(i==n)
cout<<"Not Present "; else
cout<<"Present "; cout<<count<<endl;
}
return 0;
}

Output:
 
Program 2: Given an already sorted array of positive integers, design an algorithm and implement it using a program to find whether given key element is present in the array or not. Also, find total number of comparisons for each input case. (Time Complexity = O(nlogn), where n is the size of input).

Code:
#include<iostream> using namespace std;
int binarySearch(int arr[], int n, int key, int *count){ int l=0,u=n-1,mid,k=0;
while(l<=u){ mid=(l+u)/2; (*count)++; if(arr[mid]==key){
k=1;
break;
}
else if(arr[mid]>key) u=mid-1;
else
l=mid+1;
}
return k;
}

int main(){ int t; cin>>t; while(t--){
int n,key,count=0,k; cin>>n;
int arr[n];
for(int i=0;i<n;i++) cin>>arr[i];
cin>>key; k=binarySearch(arr,n,key,&count); if(k==1)
cout<<"Present "; else
cout<<"Not Present "; cout<<count;
}
return 0;
 
}

Output:
 
Program 3: Given an already sorted array of positive integers, design an algorithm and implement it using a program to find whether a given key element is present in the sorted array or not. For an array arr[n], search at the indexes arr[0], arr[2], arr[4],. ,arr[2k] and so on. Once the interval (arr[2k] < key < arr[ 2k+1] ) is found, perform a linear search operation from the index 2k to find the element key. (Complexity < O(n), where n is the number of elements need to be scanned for searching)

Code:
#include<iostream> using namespace std;

int linearSearch(int arr[], int l, int u, int key, int *count){ for(int i=l;i<=u;i++){
(*count)++; if(arr[i]==key)
return 1;
}
return 0;
}

int newSearch(int arr[], int n, int key, int *count){ int i=1,k=0;
while(i<n){ (*count)++; if(arr[i]>key)
return linearSearch(arr,i/2,i,key,count); i=2*i;
if(2*i>n-1)
return linearSearch(arr,i/2,n-1,key,count);
}
return k;
}

int main(){ int t; cin>>t; while(t--){
int n,key,count=0,k; cin>>n;
int arr[n];
for(int i=0;i<n;i++) cin>>arr[i];
 
cin>>key; k=newSearch(arr,n,key,&count); if(k==1)
cout<<"Present "; else
cout<<"Not Present "; cout<<count;
}
return 0;
}


Output:

 
Program 4: Given a sorted array of positive integers containing few duplicate elements, design an algorithm and implement it using a program to find whether the given key element is present in the array or not. If present, then also find the number of copies of given key. (Time Complexity = O(log n))

Code:
#include<bits/stdc++.h> using namespace std;

int modifiedBinarySearch(vector<int> &v , int l, int r, int key, char choice) { int mid,result=-1;
while(l<=r){ mid=l+(r-l)/2; if(v[mid]==key){
result=mid; if(choice=='l')
r=mid-1; else
l=mid+1;
}
else if(v[mid]>key) r=mid-1;
else
l=mid+1;
}
return result;
}

int main(){ int t; cin>>t; while(t--) {
int n,a,l,r,key; cin>>n; vector<int> v; for(int i=0;i<n;i++){
cin>>a; v.push_back(a);
}
cin>>key; l=modifiedBinarySearch(v,0,n-1,key,'l'); r=modifiedBinarySearch(v,0,n-1,key,'r'); if(l==-1)
 
cout<<"Key Not Present\n"; else
cout<<key<<" - "<<(r-l+1)<<endl;
}
return 0;
}



Output:


 
Program 5: Given a sorted array of positive integers, design an algorithm and implement it using a program to find three indices i, j, k such that arr[i] + arr[j] = arr[k].

Code: #include<bits/stdc++.h> using namespace std;

bool findSequence(int arr[], int n) { if(n<3) return false;
int i,j,k;
//arr[i]+arr[j]==arr[k] -> arr[i]+arr[j]-arr[k]==0 for(k=n-1;k>1;k--) {
i=0,j=k-1; while(i<j) {
if(arr[i]+arr[j]-arr[k]==0) {
cout<<i+1<<", "<<j+1<<", "<<k+1<<endl; return true;
}
else if(arr[i]+arr[j]-arr[k]>0) j--;
else
i++;
}
}
return false;
}

int main(){ int t; cin>>t; while(t--){
int n; cin>>n; int arr[n];
for (int i = 0; i < n; i++) cin>>arr[i];
if(!findSequence(arr, n)) cout<<"No Sequence Found";
}
return 0;
}
